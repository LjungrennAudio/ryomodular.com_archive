{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 AndaleMono;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww25100\viewh15700\viewkind0
\deftab720
\pard\pardeftab720\sl276\slmult1\partightenfactor0

\f0\fs24 \cf0 deriving a boolean gate combination that produces the outcome 'At least k\'92:\
\
- an n-way majority circuit takes n inputs and returns 1 if, and only if, at least strictly more of its inputs are 1 than 0.\
- Given an n-way majority circuit, we can describe how to build an At-Least-k circuit that returns 1 if and only if at least k of its inputs are 1.\
\
- considering a 2n-way majority circuit, if:\
\
n-k+1 of the inputs are set to = 1,\
k-1 of the inputs are set to   = 0, and,\
the original n inputs are our signal inputs.\
\
This gives	z = MAJ(x1, \'85, xn, c1, \'85, cn-k+1, b1, \'85, bk-1)\
\
For n = 3, and k = 3:\
\
Hence		z = MAJ(x1, x2, x3, c1, b1, b2)\
\
x1	x2	x3	c1	b1	b2	z 
\fs28 \uc0\u8805  
\fs24 k [ = 2]	req'd		\
0	0	0	1	0	0	0			0			y\
0	0	1	1	0	0	0			0			y\
0	1	0	1	0	0	0			0			y\
1	0	0	1	0	0	0			0			y\
0	1	1	1	0	0	1			constant 
\fs28 \uc0\u8804  
\fs24 1	y\
1	1	0	1	0	0	1			constant 
\fs28 \uc0\u8804  
\fs24 1	y\
1	0	1	1	0	0	1			constant 
\fs28 \uc0\u8804  
\fs24 1	y\
1	1	1	1	0	0	1			1			y\
\
- Calculating sum of products:\
\
x1!x2x3c1b1!b2! + x1x2x3!c1b1!b2! + x1x2!x3c1b1!b2! + x1x2x3c1b1!b2! = z\
\
\
- converting boolean expression to logic circuit:\
                                       \
x2 --- \}-	   x1 --- \}-    x1 --- \}-    x1 --- \}-	   \
x3 --- \}- ]- x2 --- \}- ]- x3 --- \}- ]- x2 --- \}- ]- \
c1 --- \}-    c1 --- \}-    c1 --- \}-    x3 --- \}- \
x1 -/- \}-	   x3 -/- \}-    x2 -/- \}-    c1 --- \}-    \
b1 -/- \}- ]- b1 -/- \}- ]- b1 -/- \}- ]- b1 -/- \}-    \
b2 -/- \}-    b2 -/- \}-    b2 -/- \}-    b2 -/- \}- ]- \
\
- breaking down into nands:\
\
NAND NOT	NAND NOT	NAND NOT	NAND NOT	OR [2xNOT>NAND]  OR\
x2		x1		x1		x1		]			  ]\
x3		x2		x3		x2		] 4 input -      ]\'97-\
c1		c1		c1		x3		]			  ] |\
											    |\'97 2 input = z\
NAND		NAND		NAND		NAND		OR [2xNOT>NAND]    |\
x1		x3		x2		c1		]			  ] |\
b1		b1		b1		b1		] 4 input-       ]\'97-\
b2		b2		b2		b2		]			  ]\
\
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 - swapping redundant gates for more efficient ones, any NOTs following each other \'96 i.e. directly adjacent, can be removed as a pair;\
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 \
\pard\pardeftab720\sl276\slmult1\partightenfactor0
\cf0 3 > AND AND AND AND 	> 4 input OR	]	> 2 input OR	=	z\
3 > NAND NAND NAND NAND	> 4 input OR	]\
\
- a simplified condensed NAND based circuit that does the desired task results:\
\
6 input majority gate from 4x3 input ANDs, 4x3 input NANDS, 2x4 input Ors and a 2 input OR = z\
\
I have designed a 6 input MAJ from basic AND, NAND and Ors:\
\
Z = OR(OR(AND(x2,x3,c1),AND(x1,x2,c1),AND(x1,x3,c1),AND(x1,x2,x3)),(OR(NAND(x1,b1,b2),NAND(x3,b1,b2),NAND(x2,B!,B2),NAND(c1,b1,b2))\
\
}